[{"title":"axios跨域请求报错","url":"/2018/08/29/axios-CORS/","content":"\n**在一个开发web桌面应用的项目中，使用了axios向服务器发送请求，结果报了跨域请求的错误。页面代码大致如下：**\n\n``` js\n<script src=\"./node_modules/axios/dist/axios.js\"></script>\n<script>\n        axios.post('http://127.0.0.1:3000/getDate', {\n            a: 1\n        });\n</script>\n```\n\n![跨域报错](img/1.png)\n\n**反复查看后台代码，明明是已经加上了跨域的头部Access-Control-Allow-Origin，可是还是请求失败。**\n**代码倒是看不出任何问题，于是猜想是axios内部框架做了什么鬼祟，使用原生的XHR对象进行调试。**\n\n![原生XHR跨域](img/2.png)\n\n**果然请求到了，并且看到返回头里面带上了允许跨域头。仔细比对两次请求发现，axios发的请求的method竟是OPTIONS，这是什么，html难道不是只有GET，POST吗！？翻查[http mdn](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)**\n\n## xhr跨域请求\n\n**出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非使用CORS头文件。以下三种情况下跨域请求的结果皆不相同。**\n\n### 简单请求\n\n**某些请求不会触发 CORS 预检请求。若请求满足所有下述条件，则该请求可视为“简单请求”：**\n\n*   **使用下列方法之一：**\n    *   GET\n    *   HEAD\n    *   POST\n*   **Fetch 规范定义了对 CORS 安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为：**\n    *   Accept\n    *   Accept-Language\n    *   Content-Language\n    *   Content-Type （需要注意额外的限制）\n    *   DPR\n    *   Downlink\n    *   Save-Data\n    *   Viewport-Width\n    *   Width\n*   **Content-Type 的值仅限于下列三者之一：**\n    *   text/plain\n    *   multipart/form-data\n    *   application/x-www-form-urlencoded\n*   **请求中的任意XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。（文件上传对象）**\n*   **请求中没有使用 ReadableStream 对象。**\n\n### 预检请求\n**简单来说，请求不满足简单请求规范，则为预检请求。预检请求要求必须首先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。**\n\n**从文章开头的例子中可以看出我们的OPTIONS是一个预检请求，应该是由axios发送跨域请求的时候进行了头部的设置导致。从OPSTIONS的抓包上看，请求头里面倒是有需要预检的首部字段。**\n\n```\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type \n\n// 服务器端应加上\nAccess-Control-Allow-Methods: POST //简单请求允许method，可不带\nAccess-Control-Allow-Headers: Content-Type\n```\n\n**看来是axios将请求头进行了设置导致跨域失败，进入axios源码查看，哪里进行了配置。进入源码查询发现axios在参数为json对象时，设置了content-type为application/json;charset=utf-8**\n\n![axios源码](img/3.png)\n\n### 解决方案一：修改请求头\n\n**一种解决方法是axios设置默认头部**\n\n``` js\n<script src=\"./node_modules/axios/dist/axios.js\"></script>\n<script>\n        let config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        axios.post('http://127.0.0.1:3000/getDate', {\n            a: 1\n        }, config);\n</script>\n```\n\n### 解决方案二：服务端添加预检支持\n\n**这毕竟是一个跨域资源，是多人共享的资源，不能保证每个人请求头都属于简单请求，所以应该在服务器端对预检请求添加支持。**\n\n``` js\n// 这里以koa为例\nconst Koa = require('koa');\nconst Router = require('koa-router');\n\nconst app = new Koa();\nvar router = new Router();\n\nrouter\n  .get('/', (ctx, next) => {\n    ctx.body = 'Hello World!';\n  })\n  .post('/getDate', (ctx, next) => {\n    ctx.set('Access-Control-Allow-Origin', '*');\n    ctx.set('Access-Control-Allow-Headers', 'Content-Type');\n    ctx.response.type = 'json';\n    ctx.response.body = { data: 'Hello World' };\n  })\n\napp\n  .use(router.routes())\n  .listen(3000);\n```\n\n**加上响应头之后，理应能够自定义content-type的值，且成功跨域才对。可是跑最开始的跨域请求却出现404**\n\n![OPTIONS请求404](img/4.png)\n\n**竟然是404，一顿推理，妄加猜测，应是服务器没有路径为/getDate，method 为 OPTIONS 的路由，在服务器端加上路由。**\n\n``` js\nrouter\n  .options('/getDate', (ctx, next) => {\n    ctx.set('Access-Control-Allow-Origin', '*');\n    ctx.set('Access-Control-Allow-Headers', 'Content-Type');\n    ctx.response.body = 'allow';\n  })\n```\n\n**加上后自定义头部的跨域请求也可以正常跨域了**\n\n![预检请求OPTOINS](img/5.png)\n\n![预检请求POST](img/6.png)\n\n**由上面2图可以看出，预检跨域请求，浏览器会发送2个请求到服务器端，一个是OPTIONS预检，一个是POST请求，产生2条抓包。**\n\n</br>\n### 题外 跨域资源共享标准 （有些不常用，mark一下）\n\n**跨域资源共享标准（ [cross-origin sharing standard](http://www.w3.org/TR/cors/) ）允许在下列场景中使用跨域 HTTP 请求：**\n\n*   **XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求。**\n*   **Web 字体 (CSS 中通过 @font-face 使用跨域字体资源), 因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用。**\n*   **WebGL 贴图**\n*   **使用 drawImage 将 Images/video 画面绘制到 canvas**\n*   **样式表（使用 CSSOM）**\n*   **Scripts (未处理的异常)**","tags":["CORS"]},{"title":"hello world","url":"/2018/08/28/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["blogTest"]}]